/* TestPrivateCredentials.java
   Copyright (C) 2014 Casey Marshall

This file is a part of Jessie.

Jessie is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

Jessie is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jessie; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301
USA

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version.  */


package org.metastatic.jessie.test;

import java.nio.ByteBuffer;

import org.junit.Test;
import org.metastatic.jessie.provider.ContentType;
import org.metastatic.jessie.provider.Handshake;
import org.metastatic.jessie.provider.Record;
import org.metastatic.jessie.provider.Util;

import static org.junit.Assert.assertEquals;

/**
 * Test handshake message parsing, with real wire captures.
 */
public class TestHandshake2
{
    // Test 1: curl https://developer.apple.com/
    // Captured with wireshark.

    @Test
    public void testClientHello1() throws Exception {
        byte[] bytes = Util.toByteArray("16030100b9010000b50303538ffaffe4ed1579162ffad61a43a681b0ac7fa22a70b05519a94d0252b92aa600004a00ffc024c023c00ac009c008c028c027c014c013c012c026c025c005c004c003c02ac029c00fc00ec00d006b0067003900330016003d003c0035002f000ac007c011c002c00c00050004010000420000001800160000136170692e736d6f6f742e6170706c652e636f6d000a00080006001700180019000b00020100000d000c000a0501040102010403020333740000");
        Record record = new Record(ByteBuffer.wrap(bytes));
        System.out.println(record);
        assertEquals(ContentType.HANDSHAKE, record.contentType());
        Handshake handshake = new Handshake(record.fragment());
        assertEquals(Handshake.Type.CLIENT_HELLO, handshake.type());
        System.out.println(handshake);
    }

    @Test
    public void testServerHello1() throws Exception {
        byte[] bytes = Util.toByteArray("1603030039020000350303538ffaff5094cecc709196b184190b5785398a0047025fdf2f24e1a20b9464a700c01400000d3374000908687474702f312e31");
        Record record = new Record(ByteBuffer.wrap(bytes));
        System.out.println(record);
        assertEquals(ContentType.HANDSHAKE, record.contentType());
        Handshake handshake = new Handshake(record.fragment());
        assertEquals(Handshake.Type.SERVER_HELLO, handshake.type());
        System.out.println(handshake);
    }

    @Test
    public void testCertificate1() throws Exception {
        byte[] bytes = Util.toByteArray("");
        Record record = new Record(ByteBuffer.wrap(bytes));
        System.out.println(record);
        assertEquals(ContentType.HANDSHAKE, record.contentType());
        Handshake handshake = new Handshake(record.fragment());
        assertEquals(Handshake.Type.CERTIFICATE, handshake.type());
        System.out.println(handshake);
    }

    @Test
    public void testServerKeyExchange1() throws Exception {
        byte[] bytes = Util.toByteArray("160303014d0c0001490300174104544cee012cabc94be88e4ddf74579bb8cf3748ed84f42d9f25b62b78c97c230636c4a231941b8b9b170b8c5cbe499e8cb64f2aa62a0ef619651fa8c64e266121040101009a24b77590b98cb96f10d09b4043434445d7cf3e397a9ceb511570a901c9432de9f564893a9784c68bc22ed0a10654086a085494edce4a172f9ec6c191c6b382dc45b367cbc78eda90b1a273936a52774e5cb91708f277f63806816deb632a22140f8945091fbbb2956235dbde2bfd8cd652e610e4c6ac6f918398c0fa9ddc225ea2e248b1c42cae73019e2a967d3b02f9091affd91f22508f44f7e8237fcbec13a27d073ce4152d14d9fdcff2fcd0163bb25bb97840a8f9514f97278f4e205442f7ba2cc1ae0772f7ea2d10fd9e7c83ac15d15c426d8cd1f4e2243c032f59751d656047d54299f01379aaeee2fe2839f21f5d7a44a6db7aef222cbc3f0058c6");
        Record record = new Record(ByteBuffer.wrap(bytes));
        System.out.println(record);
        assertEquals(ContentType.HANDSHAKE, record.contentType());

        // Note that here we can't fully parse this handshake message yet,
        // since we don't support this cipher suite yet.
        Handshake handshake = new Handshake(record.fragment());
        assertEquals(Handshake.Type.SERVER_KEY_EXCHANGE, handshake.type());
        System.out.println(handshake);
    }

    @Test
    public void testServerHelloDone1() throws Exception {
        byte[] bytes = Util.toByteArray("16030300040e000000");
        Record record = new Record(ByteBuffer.wrap(bytes));
        System.out.println(record);
        assertEquals(ContentType.HANDSHAKE, record.contentType());

        Handshake handshake = new Handshake(record.fragment());
        assertEquals(Handshake.Type.SERVER_HELLO_DONE, handshake.type());
        System.out.println(handshake);
    }

    @Test
    public void testClientKeyExchange1() throws Exception {
        byte[] bytes = Util.toByteArray("1603030046100000424104321d85b852779e41edeeaee6628e2ec851680716a28b68292daa7e4d52e8f7179da647a341e513bcea53d351ca5e044fa17153419b2c5db3986f9bd1bf2476ca");
        Record record = new Record(ByteBuffer.wrap(bytes));
        System.out.println(record);
        assertEquals(ContentType.HANDSHAKE, record.contentType());

        Handshake handshake = new Handshake(record.fragment());
        assertEquals(Handshake.Type.CLIENT_KEY_EXCHANGE, handshake.type());
        System.out.println(handshake);
    }

    @Test
    public void testChangeCipherSpec1() throws Exception {
        byte[] bytes = Util.toByteArray("140303000101");
        Record record = new Record(ByteBuffer.wrap(bytes));
        System.out.println(record);
        assertEquals(ContentType.CHANGE_CIPHER_SPEC, record.contentType());
    }

    // openssl -connect developer.apple.com:443 -tls1

    @Test
    public void testClientHello2() throws Exception {
        byte[] bytes = Util.toByteArray("160301005f0100005b03015393624eb43474d07a9b46737f1e05c4d2d16775075ea2f8784bbb649699d82e00002e00390038003500160013000a00330032002f009a00990096000500040015001200090014001100080006000300ff0100000400230000");
        Record record = new Record(ByteBuffer.wrap(bytes));
        System.out.println(record);
        assertEquals(ContentType.HANDSHAKE, record.contentType());
        Handshake handshake = new Handshake(record.fragment());
        System.out.println(handshake);
        assertEquals(Handshake.Type.CLIENT_HELLO, handshake.type());
    }

    @Test
    public void testServerMessages2() throws Exception {
        // Server Hello, Certificate, Server Hello Done
        byte[] bytes = Util.toByteArray("");
        Record record = new Record(ByteBuffer.wrap(bytes));
        System.out.println(record);
        assertEquals(ContentType.HANDSHAKE, record.contentType());
        Handshake serverHello = new Handshake(record.fragment());
        System.out.println(serverHello);
        assertEquals(Handshake.Type.SERVER_HELLO, serverHello.type());
        Handshake certificate = new Handshake(((ByteBuffer) record.fragment().position(serverHello.size())).slice());
        System.out.println(certificate);
        assertEquals(Handshake.Type.CERTIFICATE, certificate.type());
        Handshake serverHelloDone = new Handshake(((ByteBuffer) record.fragment().position(serverHello.size() + certificate.size())).slice());
        System.out.println(serverHelloDone);
        assertEquals(Handshake.Type.SERVER_HELLO_DONE, serverHelloDone.type());
        assertEquals(record.length(), serverHello.size() + certificate.size() + serverHelloDone.size());
    }

    @Test
    public void testClientKeyExchange2() throws Exception {
        byte[] bytes = Util.toByteArray("1603010106100001020100bbd1b8e70b8ec75d13e978273f6079b132a953fc22c8169cc110934bc937a3dc965efc544bfc00307319b07699c66d5886db71ab6a81e60153bc0e9b6a9922351b674876f03bd0674a990a1992ab22e32626cd49014c29f308581d844528e4e865cd365590e895519c7b7f9de45862878f552660c13f00a579cd5afc3105fcc82662c86c96f9f02032aa9bd812b57d3822ff42fc8346250d7a7d9a941b1a93a7fca9c39f2c74b43b8e16ccad11976c4b20e7efa3cb016fe97a8604e9f38672486fafa022aa8e815d372560950b2057b2b903da8eb605d8acc9fe4d233ef29ca4b81da60ef4773408301860d9645e847a9eae3a289315eb1c8fd340c83db9f966");
        System.out.println(bytes.length);
        Record record = new Record(ByteBuffer.wrap(bytes));
        System.out.println(record);
        assertEquals(ContentType.HANDSHAKE, record.contentType());
        Handshake clientKeyExchange = new Handshake(record.fragment());
        System.out.println(clientKeyExchange);
        assertEquals(Handshake.Type.CLIENT_KEY_EXCHANGE, clientKeyExchange.type());
    }

    @Test
    public void testClientChangeCipherSpec2() throws Exception {
        byte[] bytes = Util.toByteArray("140301000101");
        Record record = new Record(ByteBuffer.wrap(bytes));
        assertEquals(ContentType.CHANGE_CIPHER_SPEC, record.contentType());
    }
}
